

package Formularios;

import Conexiones.Cliente;
import Conexiones.Servidor;
import Esencial.Juego;
import Esencial.ListaJugadores;
import Esencial.Sonido;
import Esencial.Usuario;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.Toolkit;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.ScrollPaneLayout;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EtchedBorder;
import javax.swing.border.LineBorder;
import javax.swing.border.MatteBorder;

/**
 * Clase que permite visualizar y manipular los elementos de la partida, como la pila de robo, pila de descarte, las cartas del jugador, en fin interactuar con el juego y con los dem√°s jugadores. 
 * @author Stalin
 */
public class Tablero extends javax.swing.JFrame {
    
    private String strSentido;
    private String strCartaActual;
    private String jugadorActual;
    private List<Usuario> jugadores;
    private int cantidadOponentes;
    private JPanel misCartas;
    private Cliente miJugadorCliente;
    private Fondo imagenFondo;
    private Dimension dimension;
    public static Usuario usuarioActual;
    public static String hostname="";
    private Sonido musicaFondo;
 

    /**
     * Creates new form Tablero
     */
    public Tablero() {
        
        jugadores=new ArrayList<Usuario>();
        strSentido = "Horario";
        strCartaActual="";
        jugadorActual = "";
        cantidadOponentes =0;
        misCartas = new JPanel(new GridLayout(1, 3, 17, 0));
        misCartas.setSize(443, 219);
        dimension = Toolkit.getDefaultToolkit().getScreenSize();
        imagenFondo = new Fondo(dimension.width,dimension.height,"/Imagenes/fondoTablero.jpg");
        
        initComponents();
        ocultarJugadores();
        fondo.setOpaque(false);
        fondo.add(imagenFondo);

        this.setExtendedState(MAXIMIZED_BOTH);
        
                
        musicaFondo = new Sonido(this,1);
        musicaFondo.play();
        
        
        //Scanner sc = new Scanner(System.in);
        
        //new Tablero().getFondo.add(new Fondo("/Imagenes/fondoTablero.jpg"));
        //this.setVisible(true);
        ///sc.nextInt();
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fondo = new javax.swing.JPanel();
        nicknameJ1 = new javax.swing.JLabel();
        nicknameJ3 = new javax.swing.JLabel();
        nicknameJ2 = new javax.swing.JLabel();
        imagenJ1 = new javax.swing.JPanel();
        imagenJ3 = new javax.swing.JPanel();
        imagenJ4 = new javax.swing.JPanel();
        imagenJ2 = new javax.swing.JPanel();
        cartasJ1 = new javax.swing.JLabel();
        cartasJ3 = new javax.swing.JLabel();
        cartasJ4 = new javax.swing.JLabel();
        cartasJ2 = new javax.swing.JLabel();
        nicknameJ4 = new javax.swing.JLabel();
        sentido = new javax.swing.JLabel();
        cartaBocaAbajo = new javax.swing.JLabel();
        cartaActual = new javax.swing.JLabel();
        cartaEquivocada = new javax.swing.JButton();
        desafiar = new javax.swing.JButton();
        decirUno = new javax.swing.JButton();
        abandonar = new javax.swing.JButton();
        listaNickname = new javax.swing.JComboBox();
        sorprender = new javax.swing.JButton();
        aceptar = new javax.swing.JButton();
        visorCartas = new javax.swing.JScrollPane();
        pasar = new javax.swing.JButton();
        puntosJ2 = new javax.swing.JLabel();
        puntosJ1 = new javax.swing.JLabel();
        puntosJ3 = new javax.swing.JLabel();
        puntosJ4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fondo.setBackground(new java.awt.Color(0, 153, 51));

        nicknameJ1.setFont(new java.awt.Font("Kristen ITC", 1, 16)); // NOI18N
        nicknameJ1.setForeground(new java.awt.Color(0, 255, 255));
        nicknameJ1.setText("nicknameJ1");

        nicknameJ3.setFont(new java.awt.Font("Kristen ITC", 1, 16)); // NOI18N
        nicknameJ3.setForeground(new java.awt.Color(0, 255, 0));
        nicknameJ3.setText("nicknameJ3");

        nicknameJ2.setFont(new java.awt.Font("Kristen ITC", 1, 16)); // NOI18N
        nicknameJ2.setForeground(java.awt.Color.yellow);
        nicknameJ2.setText("nicknameJ2");

        javax.swing.GroupLayout imagenJ1Layout = new javax.swing.GroupLayout(imagenJ1);
        imagenJ1.setLayout(imagenJ1Layout);
        imagenJ1Layout.setHorizontalGroup(
            imagenJ1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );
        imagenJ1Layout.setVerticalGroup(
            imagenJ1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout imagenJ3Layout = new javax.swing.GroupLayout(imagenJ3);
        imagenJ3.setLayout(imagenJ3Layout);
        imagenJ3Layout.setHorizontalGroup(
            imagenJ3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );
        imagenJ3Layout.setVerticalGroup(
            imagenJ3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        imagenJ4.setPreferredSize(new java.awt.Dimension(150, 150));

        javax.swing.GroupLayout imagenJ4Layout = new javax.swing.GroupLayout(imagenJ4);
        imagenJ4.setLayout(imagenJ4Layout);
        imagenJ4Layout.setHorizontalGroup(
            imagenJ4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );
        imagenJ4Layout.setVerticalGroup(
            imagenJ4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout imagenJ2Layout = new javax.swing.GroupLayout(imagenJ2);
        imagenJ2.setLayout(imagenJ2Layout);
        imagenJ2Layout.setHorizontalGroup(
            imagenJ2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );
        imagenJ2Layout.setVerticalGroup(
            imagenJ2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        cartasJ1.setFont(new java.awt.Font("Kristen ITC", 1, 16)); // NOI18N
        cartasJ1.setForeground(new java.awt.Color(0, 255, 255));
        cartasJ1.setText("cartas: 0");

        cartasJ3.setFont(new java.awt.Font("Kristen ITC", 1, 16)); // NOI18N
        cartasJ3.setForeground(new java.awt.Color(0, 255, 0));
        cartasJ3.setText("cartas: 0");

        cartasJ4.setFont(new java.awt.Font("Kristen ITC", 1, 16)); // NOI18N
        cartasJ4.setForeground(new java.awt.Color(255, 255, 0));
        cartasJ4.setText("cartas: 0");

        cartasJ2.setFont(new java.awt.Font("Kristen ITC", 1, 16)); // NOI18N
        cartasJ2.setForeground(java.awt.Color.yellow);
        cartasJ2.setText("cartas: 0");

        nicknameJ4.setFont(new java.awt.Font("Kristen ITC", 1, 16)); // NOI18N
        nicknameJ4.setForeground(new java.awt.Color(255, 255, 0));
        nicknameJ4.setText("nicknameJ4");

        sentido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Horario.png"))); // NOI18N

        cartaBocaAbajo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/CartaBocaAbajo.jpg"))); // NOI18N
        cartaBocaAbajo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cartaBocaAbajoMouseClicked(evt);
            }
        });

        cartaActual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/CartaBocaAbajo.jpg"))); // NOI18N

        cartaEquivocada.setText("Carta Equivocada");
        cartaEquivocada.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cartaEquivocadaMouseClicked(evt);
            }
        });

        desafiar.setText("Desafiar");
        desafiar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                desafiarMouseClicked(evt);
            }
        });

        decirUno.setText("Decir UNO!!!");
        decirUno.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                decirUnoMouseClicked(evt);
            }
        });

        abandonar.setText("Abandonar");
        abandonar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                abandonarMouseClicked(evt);
            }
        });

        sorprender.setText("Sorprender");
        sorprender.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sorprenderMouseClicked(evt);
            }
        });

        aceptar.setText("OK");
        aceptar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                aceptarMouseClicked(evt);
            }
        });

        visorCartas.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        visorCartas.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        visorCartas.setOpaque(false);

        pasar.setText("Pasar");
        pasar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pasarMouseClicked(evt);
            }
        });

        puntosJ2.setFont(new java.awt.Font("Kristen ITC", 1, 16)); // NOI18N
        puntosJ2.setForeground(java.awt.Color.yellow);
        puntosJ2.setText("pJ2");

        puntosJ1.setFont(new java.awt.Font("Kristen ITC", 1, 16)); // NOI18N
        puntosJ1.setForeground(new java.awt.Color(0, 255, 255));
        puntosJ1.setText("pJ1");

        puntosJ3.setFont(new java.awt.Font("Kristen ITC", 1, 16)); // NOI18N
        puntosJ3.setForeground(new java.awt.Color(0, 255, 0));
        puntosJ3.setText("pJ3");

        puntosJ4.setFont(new java.awt.Font("Kristen ITC", 1, 16)); // NOI18N
        puntosJ4.setForeground(java.awt.Color.yellow);
        puntosJ4.setText("pJ4");

        javax.swing.GroupLayout fondoLayout = new javax.swing.GroupLayout(fondo);
        fondo.setLayout(fondoLayout);
        fondoLayout.setHorizontalGroup(
            fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fondoLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(fondoLayout.createSequentialGroup()
                        .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(imagenJ2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cartasJ2)
                            .addGroup(fondoLayout.createSequentialGroup()
                                .addComponent(nicknameJ2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(puntosJ2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 188, Short.MAX_VALUE)
                        .addComponent(cartaBocaAbajo))
                    .addComponent(visorCartas, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(57, 57, 57)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cartasJ3)
                    .addGroup(fondoLayout.createSequentialGroup()
                        .addComponent(nicknameJ3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(puntosJ3))
                    .addComponent(imagenJ3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(fondoLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(sentido))
                    .addComponent(cartasJ1)
                    .addGroup(fondoLayout.createSequentialGroup()
                        .addComponent(nicknameJ1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(puntosJ1))
                    .addComponent(imagenJ1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(decirUno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cartaActual, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cartaEquivocada, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sorprender, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(abandonar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fondoLayout.createSequentialGroup()
                        .addGap(174, 174, 174)
                        .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cartasJ4)
                            .addGroup(fondoLayout.createSequentialGroup()
                                .addComponent(nicknameJ4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(puntosJ4))
                            .addComponent(imagenJ4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(fondoLayout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(aceptar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(desafiar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(listaNickname, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(pasar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(23, 23, 23))
        );
        fondoLayout.setVerticalGroup(
            fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fondoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imagenJ3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fondoLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cartaBocaAbajo)
                            .addComponent(cartaActual)
                            .addGroup(fondoLayout.createSequentialGroup()
                                .addComponent(imagenJ2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(nicknameJ2)
                                    .addComponent(puntosJ2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cartasJ2))
                            .addGroup(fondoLayout.createSequentialGroup()
                                .addComponent(imagenJ4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(nicknameJ4)
                                    .addComponent(puntosJ4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cartasJ4))))
                    .addGroup(fondoLayout.createSequentialGroup()
                        .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nicknameJ3, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(puntosJ3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cartasJ3, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sentido)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(visorCartas, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(fondoLayout.createSequentialGroup()
                        .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(imagenJ1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(fondoLayout.createSequentialGroup()
                                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cartaEquivocada)
                                    .addComponent(aceptar))
                                .addGap(18, 18, 18)
                                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(decirUno)
                                    .addComponent(desafiar))
                                .addGap(18, 18, 18)
                                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(sorprender)
                                    .addComponent(listaNickname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(abandonar)
                                .addComponent(pasar))
                            .addGroup(fondoLayout.createSequentialGroup()
                                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(puntosJ1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(nicknameJ1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cartasJ1)))))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cartaBocaAbajoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cartaBocaAbajoMouseClicked
        //RobarCarta
        cartaBocaAbajo.setVisible(false);
        cartaEquivocada.setVisible(false);
        pasar.setVisible(true);
        miJugadorCliente.enviar("get,carta,"+miJugadorCliente.getMiIp());
        
    }//GEN-LAST:event_cartaBocaAbajoMouseClicked

    private void cartaEquivocadaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cartaEquivocadaMouseClicked
        miJugadorCliente.enviar("cartaequivocada,"+miJugadorCliente.getMiIp());
    }//GEN-LAST:event_cartaEquivocadaMouseClicked

    private void decirUnoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_decirUnoMouseClicked
       miJugadorCliente.enviar("protegeme,"+miJugadorCliente.getMiIp());
    }//GEN-LAST:event_decirUnoMouseClicked

    private void sorprenderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sorprenderMouseClicked
        String ipASorprender = "";
        
        for(int i=0;i<jugadores.size();i++){
            if(listaNickname.getSelectedItem()==jugadores.get(i).getNickname()){
                ipASorprender = jugadores.get(i).getCliente().getMiIp();
                break;
            }
        }
        miJugadorCliente.enviar("sorprende,"+miJugadorCliente.getMiIp()+","+ipASorprender);
    }//GEN-LAST:event_sorprenderMouseClicked

    private void pasarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pasarMouseClicked
        miJugadorCliente.enviar("paso,"+miJugadorCliente.getMiIp());
    }//GEN-LAST:event_pasarMouseClicked

    private void desafiarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_desafiarMouseClicked
        miJugadorCliente.enviar("desafio,"+miJugadorCliente.getMiIp());
    }//GEN-LAST:event_desafiarMouseClicked

    private void aceptarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aceptarMouseClicked
        try {
            cartaEquivocada.setVisible(false);
            desafiar.setVisible(false);
            miJugadorCliente.enviar("ejecutacarta,"+miJugadorCliente.getMiIp());
        } catch (Exception e) {
        }
    }//GEN-LAST:event_aceptarMouseClicked

    private void abandonarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_abandonarMouseClicked
        
        // cartasRestantes guarda las carta as√≠ tipo,numeroONombre,color,valor
        
        int numCartasRestantes = 0;
        String cartasRestantes = "";
        
        for(int i=0;i<jugadores.size();i++){
            if(jugadores.get(i).getCliente().getMiIp().contains(Cliente.saberMiIp())){
                
                numCartasRestantes = jugadores.get(i).getListaCartas().size();
                cartasRestantes = cartasRestantes + numCartasRestantes;
            
                for(int j=0;j<numCartasRestantes;j++){
                    
                    if(jugadores.get(i).getListaCartas().get(j) instanceof CartaNormal){
                        CartaNormal cartaNormal = (CartaNormal) (jugadores.get(i).getListaCartas().get(j));
                        cartasRestantes = cartasRestantes + ",CartaNormal," + cartaNormal.getNumero() + ","
                                                          + cartaNormal.getColor() + "," + cartaNormal.getValor();
                        
                        
                    }else{
                        CartaEspecial  cartaEspecial = (CartaEspecial) (jugadores.get(i).getListaCartas().get(j));
                        cartasRestantes = cartasRestantes + ",CartaEspecial," + cartaEspecial.getNombre()+ ","
                                                          + cartaEspecial.getColor() + "," + cartaEspecial.getValor();
                    }
                    
                }
            
                break;
            }
            
        }
        
        miJugadorCliente.enviar("abandono,"+Cliente.saberMiIp()+","+cartasRestantes);
        
    }//GEN-LAST:event_abandonarMouseClicked
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[], Usuario usuarioActual, String ipServidor) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                Tablero tablero = new Tablero();
                
                try{
                    
                    tablero.setVisible(true);

                    Cliente cliente = new Cliente(ipServidor, 9090);
                    
                    

                    Usuario usuario = new Usuario(usuarioActual.getNombre(),usuarioActual.getApellido(),usuarioActual.getNickname(),
                                                  usuarioActual.getClave(),usuarioActual.getImagen(),usuarioActual.getEimail(),
                                                  usuarioActual.getEstado(),cliente);

                    usuario.setHostname(Tablero.hostname);
                    usuario.setTablero(tablero);
                    usuario.iniciar();
                    
                }catch(Exception e){
                    JOptionPane.showMessageDialog(tablero, e.getMessage());
                    String[] args = null;
                    Sala.hostname = Tablero.hostname;
                    Sala.usuarioActual = Tablero.usuarioActual;
                    Sala.main(args);
                    tablero.musicaFondo.Stop();
                    tablero.dispose();  
                }
                
                
            }
        });
    }
    
     /**
     * @param args the command line arguments
     */
    public static void main(String args[], Usuario usuarioActual, int cantidadJugadores, String modalidad, int puntos) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Tablero tablero = new Tablero();
                boolean seguirEsperando = true;
                
                try{
                    tablero.setVisible(true);
                
                    Servidor servidor = new Servidor(9090,cantidadJugadores);
                    Juego juego = new Juego(servidor,cantidadJugadores,modalidad,puntos);

                    Cliente cliente = new Cliente(Cliente.saberMiIp(),9090);

                    
                    
                    Usuario usuario = new Usuario(usuarioActual.getNombre(),usuarioActual.getApellido(),usuarioActual.getNickname(),
                                                  usuarioActual.getClave(),usuarioActual.getImagen(),usuarioActual.getEimail(),
                                                  usuarioActual.getEstado(),cliente);
                    
                    usuario.setHostname(Tablero.hostname);
                    usuario.setTablero(tablero);
                    usuario.iniciar();
                    

                    while(servidor.getNumClientesConectados()<servidor.getCantidadClientes())
                        if(!seguirEsperando){
                            System.exit(0);
                        }
                        else
                            seguirEsperando = usuario.esperarJugadores(servidor, tablero);     

                    juego.iniciarJuego();
                
                }catch(Exception e){
                    JOptionPane.showMessageDialog(tablero, e.getMessage());
                    String[] args = null;
                    Sala.hostname = Tablero.hostname;
                    Sala.usuarioActual = Tablero.usuarioActual;
                    Sala.main(args);
                    tablero.musicaFondo.Stop();
                    tablero.dispose(); 
                }
                
            }
        });
        
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abandonar;
    private javax.swing.JButton aceptar;
    private javax.swing.JLabel cartaActual;
    private javax.swing.JLabel cartaBocaAbajo;
    private javax.swing.JButton cartaEquivocada;
    private javax.swing.JLabel cartasJ1;
    private javax.swing.JLabel cartasJ2;
    private javax.swing.JLabel cartasJ3;
    private javax.swing.JLabel cartasJ4;
    private javax.swing.JButton decirUno;
    private javax.swing.JButton desafiar;
    private javax.swing.JPanel fondo;
    private javax.swing.JPanel imagenJ1;
    private javax.swing.JPanel imagenJ2;
    private javax.swing.JPanel imagenJ3;
    private javax.swing.JPanel imagenJ4;
    private javax.swing.JComboBox listaNickname;
    private javax.swing.JLabel nicknameJ1;
    private javax.swing.JLabel nicknameJ2;
    private javax.swing.JLabel nicknameJ3;
    private javax.swing.JLabel nicknameJ4;
    private javax.swing.JButton pasar;
    private javax.swing.JLabel puntosJ1;
    private javax.swing.JLabel puntosJ2;
    private javax.swing.JLabel puntosJ3;
    private javax.swing.JLabel puntosJ4;
    private javax.swing.JLabel sentido;
    private javax.swing.JButton sorprender;
    private javax.swing.JScrollPane visorCartas;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the sentido
     */
    public String getStrSentido() {
        return strSentido;
    }

    /**
     * @param strSentido the sentido to set
     */
    public void setStrSentido(String strSentido) {
        this.strSentido = strSentido;
    }
    
    
    public void setMusicaFondo(Sonido musicaFondo){
        this.musicaFondo = musicaFondo;
    }
    
    public Sonido getMusicaFondo(){
        return musicaFondo;
    }
    
    
    

    /**
     * @return the cartaActual
     */
    public String getStrCartaActual() {
        return strCartaActual;
    }

    /**
     * @param strCartaActual the cartaActual to set
     */
    public void setStrCartaActual(String strCartaActual) {
        this.strCartaActual = strCartaActual;
    }

    /**
     * @return the jugadores
     */
    public List<Usuario> getJugadores() {
        return jugadores;
    }

    /**
     * @param jugadores the jugadores to set
     */
    public void setJugadores(List<Usuario> jugadores) {
        this.jugadores = jugadores;
    }

    /**
     * @return the ipJjugadorActual
     */
    public String getJugadorActual() {
        return jugadorActual;
    }

    /**
     * @param ipJugadorActual the jugadorActual to set
     */
    public void setJugadorActual(String ipJugadorActual) {
        this.jugadorActual = ipJugadorActual;
        
        misCartas.setVisible(true);
        cartaEquivocada.setVisible(true);
        
        
        if(!esteJugadorSoyYo(ipJugadorActual)){
            desafiar.setVisible(false);
            aceptar.setVisible(false);
            pasar.setVisible(false);
            cartaBocaAbajo.setVisible(false);
            
        }else{
            
            cartaBocaAbajo.setVisible(true);
        }
        
        
        String nickJugadorActual="";
        for(int i=0;i<jugadores.size();i++){
            if(ipJugadorActual.contains(jugadores.get(i).getCliente().getMiIp())){
                nickJugadorActual = jugadores.get(i).getNickname();
                break;
            }
        }
        
        imagenJ1.setBorder(null);
        imagenJ3.setBorder(null);
        imagenJ4.setBorder(null);
        imagenJ2.setBorder(null);
        
        if(nickJugadorActual.equalsIgnoreCase(nicknameJ1.getText())){
            //juega el jugador 1
            imagenJ1.setBorder(new MatteBorder(0,0,5,5,Color.RED) );
        }else{
            if(nickJugadorActual.equalsIgnoreCase(nicknameJ3.getText())){
                //juega el jugador 2
                imagenJ3.setBorder(new MatteBorder(0,0,5,5,Color.RED) ); 
            
            }else{
                if(nickJugadorActual.equalsIgnoreCase(nicknameJ4.getText())){
                    //juega el jugador 3
                    imagenJ4.setBorder(new MatteBorder(0,0,5,5,Color.RED) );
            
                }else{
                    //juega el jugador 4
                    imagenJ2.setBorder(new MatteBorder(0,0,5,5,Color.RED) );
        
                }
            }
        }
        
        
    }
    
    public void addJugador(Usuario jugador, String ip){
        
        jugadores.add(jugador);
        
        if(esteJugadorSoyYo(ip))
            miJugadorCliente =jugador.getCliente(); 
        else
            jugador.setCliente(new Cliente(ip));
            
        cantidadOponentes++;
            
        listaNickname.addItem(jugador.getNickname());
        switch(cantidadOponentes){
                               
            case 1:{
                nicknameJ1.setText(jugador.getNickname());
                cartasJ1.setText("cartas: 7");
                puntosJ1.setText("0");
                imagenJ1.setOpaque(true);
                pintarImagen(jugador);
                imagenJ1.setVisible(true);
                nicknameJ1.setVisible(true);
                cartasJ1.setVisible(true);
                puntosJ1.setVisible(true);
                    
                    
                    
            }break;
                    
            case 2:{
                nicknameJ2.setText(jugador.getNickname());
                cartasJ2.setText("cartas: 7");
                puntosJ2.setText("0");
                imagenJ2.setOpaque(true);
                pintarImagen(jugador);
                imagenJ2.setVisible(true);
                nicknameJ2.setVisible(true);
                cartasJ2.setVisible(true);
                puntosJ2.setVisible(true);
            }break;
                    
            case 3:{
                nicknameJ3.setText(jugador.getNickname());
                cartasJ3.setText("cartas: 7");
                puntosJ3.setText("0");
                imagenJ3.setOpaque(true);
                pintarImagen(jugador);
                imagenJ3.setVisible(true);
                nicknameJ3.setVisible(true);
                cartasJ3.setVisible(true);
                puntosJ3.setVisible(true);
            }break;
                    
            case 4:{
                nicknameJ4.setText(jugador.getNickname());
                cartasJ4.setText("cartas: 7");
                puntosJ4.setText("0");
                imagenJ4.setOpaque(true);
                pintarImagen(jugador);
                imagenJ4.setVisible(true);
                nicknameJ4.setVisible(true);
                cartasJ4.setVisible(true);
                puntosJ4.setVisible(true);
            }break;

            default:{
               JOptionPane.showMessageDialog(null, "sala full");
            }break;
        }
        
        
    
    }
    
    
    
    public boolean esteJugadorSoyYo(String ipDesconocida){
        
        String miIp="";
        
        try { 
            InetAddress temp = InetAddress.getLocalHost();
            miIp =  temp.getHostAddress();
      
        } catch (UnknownHostException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
        
        if(ipDesconocida.contains(miIp))
                return true;
        
        return false;
    }
    
    public void setCantidadCartas(String ip, String strCantidad){
        
        int intCantidad = Integer.parseInt(strCantidad);
        
        for(int i=0;i<jugadores.size();i++){
            if(ip.contains(jugadores.get(i).getCliente().getMiIp())){
                jugadores.get(i).setCantidadCartas(intCantidad);
                
                if(jugadores.get(i).getNickname().equalsIgnoreCase(nicknameJ1.getText()))
                    cartasJ1.setText("cartas: "+jugadores.get(i).getCantidadCartas());
                
                if(jugadores.get(i).getNickname().equalsIgnoreCase(nicknameJ2.getText()))
                    cartasJ2.setText("cartas: "+jugadores.get(i).getCantidadCartas());
                
                if(jugadores.get(i).getNickname().equalsIgnoreCase(nicknameJ3.getText()))
                    cartasJ3.setText("cartas: "+jugadores.get(i).getCantidadCartas());
                
                if(jugadores.get(i).getNickname().equalsIgnoreCase(nicknameJ4.getText()))
                    cartasJ4.setText("cartas: "+jugadores.get(i).getCantidadCartas());
 
                break;
            }
        }
        
        
    }
    
    public void ocultarJugadores(){
        
        imagenJ1.setOpaque(false);
        imagenJ2.setOpaque(false);
        imagenJ3.setOpaque(false);
        imagenJ4.setOpaque(false);
        
        
        imagenJ1.setBackground(Color.BLACK);
        nicknameJ1.setText("");
        cartasJ1.setText("");
        puntosJ1.setText("");
        
        imagenJ2.setBackground(Color.BLACK);
        nicknameJ2.setText("");
        cartasJ2.setText("");
        puntosJ2.setText("");
        
        imagenJ3.setBackground(Color.BLACK);
        nicknameJ3.setText("");
        cartasJ3.setText("");
        puntosJ3.setText("");
        
        imagenJ4.setBackground(Color.BLACK);
        nicknameJ4.setText("");
        cartasJ4.setText("");
        puntosJ4.setText("");
        
        
    }
    
    public void sacarJugador(String ipASacar, String nicknameASacar ){
        
        if(esteJugadorSoyYo(ipASacar)){
            cartaBocaAbajo.setVisible(false);
            misCartas.setVisible(false);
            visorCartas.setVisible(false);
            cartaEquivocada.setVisible(false);
            decirUno.setVisible(false);
            sorprender.setVisible(false);
            abandonar.setVisible(false);
            aceptar.setVisible(false);
            desafiar.setVisible(false);
            listaNickname.setVisible(false);
            pasar.setVisible(false);
            
        }
        
        if(nicknameASacar.equalsIgnoreCase(nicknameJ1.getText())){
            nicknameJ1.setVisible(false);
            cartasJ1.setVisible(false);
            puntosJ1.setVisible(false);
            imagenJ1.setVisible(false);
            
        }else{
            if(nicknameASacar.equalsIgnoreCase(nicknameJ2.getText())){
                nicknameJ2.setVisible(false);
                cartasJ2.setVisible(false);
                puntosJ2.setVisible(false);
                imagenJ2.setVisible(false);
            }else{
                if(nicknameASacar.equalsIgnoreCase(nicknameJ3.getText())){
                    nicknameJ3.setVisible(false);
                    cartasJ3.setVisible(false);
                    puntosJ3.setVisible(false);
                    imagenJ3.setVisible(false);
                }else{
                    nicknameJ4.setVisible(false);
                    cartasJ4.setVisible(false);
                    puntosJ4.setVisible(false);
                    imagenJ4.setVisible(false);
                }
            }
        }
    
        listaNickname.removeItem(nicknameASacar);
        cantidadOponentes--;
        
        for(int i=0;i<jugadores.size();i++)
            if(jugadores.get(i).getNickname().equalsIgnoreCase(nicknameASacar)){
                jugadores.remove(i);
                break;
            }
    }
    
    public void pintarImagen(Usuario jugador){
        
        //JPanel imagenJX = imagenJ1;
        JPanel imagen1 = new JPanel();
        JPanel imagen2 = new JPanel();
        JPanel imagen3 = new JPanel();
        JPanel imagen4 = new JPanel();
        
        imagen1.setBounds(0, 0, imagenJ1.getWidth(), imagenJ1.getHeight());
        imagen4.setBounds(0, 0, imagenJ2.getWidth(), imagenJ2.getHeight());
        imagen2.setBounds(0, 0, imagenJ3.getWidth(), imagenJ3.getHeight());
        imagen3.setBounds(0, 0, imagenJ4.getWidth(), imagenJ4.getHeight());
         
        ImagenFondo fondo = new ImagenFondo(jugador.getImagen(),imagenJ1,this.fondo);
        
        if(jugador.getNickname().equalsIgnoreCase(nicknameJ1.getText())){
            imagen1.add(fondo);
            imagen1.setBackground(Color.BLACK);
            imagenJ1.setBackground(Color.BLACK);
            imagenJ1.add(imagen1);
            imagenJ1.setVisible(true);
        }
            
        
        if(jugador.getNickname().equalsIgnoreCase(nicknameJ2.getText())){
            imagen2.add(fondo);
            imagen2.setBackground(Color.BLACK);
            imagenJ2.setBackground(Color.BLACK);
            imagenJ2.add(imagen2);
            imagenJ2.setVisible(true);
        }
            
        
        if(jugador.getNickname().equalsIgnoreCase(nicknameJ3.getText())){
            imagen3.add(fondo);
            imagen3.setBackground(Color.BLACK);
            imagenJ3.setBackground(Color.BLACK);
            imagenJ3.add(imagen3);
            imagenJ3.setVisible(true);
        }
            
        
        if(jugador.getNickname().equalsIgnoreCase(nicknameJ4.getText())){
            imagen4.add(fondo);
            imagen4.setBackground(Color.BLACK);
            imagenJ4.setBackground(Color.BLACK);
            imagenJ4.add(imagen4);
            imagenJ4.setVisible(true);
        }      
 
        this.setVisible(true);
        this.repaint();
        
 
    }
    
    public void cambiarCartaActual(String strCartaActual){
        
        cartaActual.setIcon(new ImageIcon(getClass().getResource("/Imagenes/"+strCartaActual+".jpg")));
        
        //no se evalua cambio de color porque que el jugador no tenga color para jugar
        if(esteJugadorSoyYo(jugadorActual) &&(strCartaActual.charAt(0)=='+' || strCartaActual.charAt(0)=='R' || strCartaActual.charAt(0)=='S')){
            if(strCartaActual.contains("+4"))
                desafiar.setVisible(true);
            pasar.setVisible(false);
            aceptar.setVisible(true);
            cartaBocaAbajo.setVisible(false);
            misCartas.setVisible(false);
        }
        
        cartaActual.setVisible(true);
        this.setVisible(true);
        cartaActual.setVisible(true);
        
        
    
    }
    
    public void cambiarSentido(String strSentido){
        
        
        
        if(strSentido.equalsIgnoreCase("Horario"))
            this.sentido.setIcon(new ImageIcon(getClass().getResource("/Imagenes/Horario.png")));
        else
           this.sentido.setIcon(new ImageIcon(getClass().getResource("/Imagenes/AntiHorario.png")));
        
        sentido.setVisible(true);
        this.setVisible(true);
        sentido.setVisible(true);     
        
    }
    
    public void addAMisCartas(String tipoCarta,String numeroONombre,String color, String valor){
        
        
        
        for(int i=0;i<jugadores.size();i++){
            if(jugadores.get(i).getCliente().getMiIp().contains(Cliente.saberMiIp())){
                
                if(tipoCarta.equalsIgnoreCase("CartaNormal")){
                CartaNormal cartaNormal = new CartaNormal(Integer.parseInt(numeroONombre),color,miJugadorCliente,this);
                jugadores.get(i).getListaCartas().add(cartaNormal);
                misCartas.add(cartaNormal);
                misCartas.setVisible(true);
                cartaNormal.setVisible(true);
                visorCartas.setVisible(true);
                this.setVisible(true);
                this.repaint();
                visorCartas.setViewportView(misCartas);
                visorCartas.getHorizontalScrollBar().setValue(visorCartas.getHorizontalScrollBar().getMaximum());
                
                
                
                
                }else{
                CartaEspecial cartaEspecial = new CartaEspecial(numeroONombre,color,Integer.parseInt(valor),miJugadorCliente,this);
                jugadores.get(i).getListaCartas().add(cartaEspecial);
                misCartas.add(cartaEspecial);
                misCartas.setVisible(true);
                cartaEspecial.setVisible(true);
                visorCartas.setVisible(true);
                this.setVisible(true);
                this.repaint();
                visorCartas.setViewportView(misCartas);
                visorCartas.getHorizontalScrollBar().setValue(visorCartas.getHorizontalScrollBar().getMaximum());
                }
                     
                break;
            }
        }
    }
    
    public void removeDeMisCartas(String numeroONombre, String color){
        for(int i=0;i<jugadores.size();i++){
            if(jugadores.get(i).getCliente().getMiIp().contains(Cliente.saberMiIp())){
                
                if(jugadores.get(i).getListaCartas().get(numeroONombre,color) instanceof CartaNormal){
                CartaNormal cartaNormal = (CartaNormal) jugadores.get(i).getListaCartas().get(numeroONombre,color);
                                
                jugadores.get(i).getListaCartas().remove(cartaNormal);
                misCartas.remove(cartaNormal);
                misCartas.repaint();
                misCartas.setVisible(true);
                visorCartas.setVisible(true);
                this.setVisible(true);
                this.repaint();
                visorCartas.setViewportView(misCartas);
 
                }else{
                CartaEspecial cartaEspecial = (CartaEspecial) jugadores.get(i).getListaCartas().get(numeroONombre,color);
                jugadores.get(i).getListaCartas().remove(cartaEspecial);
                misCartas.remove(cartaEspecial);
                misCartas.remove(cartaEspecial);
                misCartas.setVisible(true);
                visorCartas.setVisible(true);
                this.setVisible(true);
                this.repaint();
                visorCartas.setViewportView(misCartas);
                }    
                break;
            }
        }
    }
    
    public void setPuntos(String puntos, String nickname){
        
        int puntosAOrtorgar = Integer.parseInt(puntos);
        
        for(int i=0;i<jugadores.size();i++){
            if(nickname.equalsIgnoreCase(jugadores.get(i).getNickname())){
                jugadores.get(i).setPuntos(puntosAOrtorgar);
                
                if(jugadores.get(i).getNickname().equalsIgnoreCase(nicknameJ1.getText()))
                    puntosJ1.setText(puntos);
                
                if(jugadores.get(i).getNickname().equalsIgnoreCase(nicknameJ2.getText()))
                    puntosJ2.setText(puntos);
                
                if(jugadores.get(i).getNickname().equalsIgnoreCase(nicknameJ3.getText()))
                    puntosJ3.setText(puntos);
                
                if(jugadores.get(i).getNickname().equalsIgnoreCase(nicknameJ4.getText()))
                    puntosJ4.setText(puntos);
 
                break;
            }
        }
        
    }
    
    public void prepararOtraPartida(){
        
        musicaFondo.Stop();
        musicaFondo = new Sonido(this);
        musicaFondo.play();
        
        misCartas.removeAll();
        
        switch(cantidadOponentes){
            case 1:{
                cartasJ1.setText("cartas: 0");
            
            }break;
                
            case 2:{
                cartasJ2.setText("cartas: 0");
            
            }break;
                
            case 3:{
                cartasJ3.setText("cartas: 0");
            
            }break;
                
            case 4:{
                cartasJ4.setText("cartas: 0");
            
            }break;
        
        }
        
        
        
        
        for(int i=0;i<jugadores.size();i++){
            jugadores.get(i).setCantidadCartas(-jugadores.get(i).getCantidadCartas());  
        }
        
        cambiarSentido("Horario");
    }
    
    public void activarCartas(){
        cartaBocaAbajo.setVisible(true);
        misCartas.setVisible(true);
        aceptar.setVisible(false);
        desafiar.setVisible(false);
    }
    
    
}
