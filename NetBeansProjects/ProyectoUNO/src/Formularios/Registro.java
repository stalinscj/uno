/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template archivo, choose Tools | Templates
 * and open the template in the editor.
 */

package Formularios;

import Conexiones.ConexionMYSQL;
import Esencial.Imagen;
import Esencial.Sonido;
import Esencial.Usuario;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.commons.codec.digest.DigestUtils;

/**
 * Clase que representa un formulario en el cual un usuario ingresará sus datos para registrarse en el sistema.
 * @author Stalin
 */
public class Registro extends javax.swing.JFrame {
    
    private Fondo  imagenFondo;
    public static String origen="";
    public static String hostname="";
    public static Usuario usuarioActual;
    private File archivo;
    private String tipoDeImagen;
    private boolean cambiarImagen;
    private boolean cambiarClave;
    private Sonido musicaFondo;
    
    
    public Registro() {
  
        if(origen.equalsIgnoreCase("Login")){
            imagenFondo = new Fondo("/Imagenes/fondoRegistro.jpg");
            usuarioActual = null;
        }else{
            imagenFondo = new Fondo("/Imagenes/fondoModificacion.jpg");
            cambiarImagen = false;
            cambiarClave = false;
        }
        
        archivo=null;
        tipoDeImagen="";
        
        initComponents();
        
        this.setSize(imagenFondo.getWidth(),imagenFondo.getHeight());
        
        fondo.add(imagenFondo);
        fondo.setOpaque(false);
        

        this.setLocationRelativeTo(null);
        this.setResizable(false);
        txtNombreImagen.setEditable(false);
        
        this.txtNombre.requestFocus();
        
        
        if(origen.equalsIgnoreCase("Sala")){
            cargarUsuario();
            txtNickname.setEditable(false);
            txtPass1.setEditable(false);
            txtPass2.setEditable(false);
        }
        
              
                
        
        
        musicaFondo = new Sonido(this);
        musicaFondo.play();
        
        
            
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fondo = new javax.swing.JPanel();
        lblNombre = new javax.swing.JLabel();
        lblApellido = new javax.swing.JLabel();
        lblNickname = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        lblPass2 = new javax.swing.JLabel();
        lblPass1 = new javax.swing.JLabel();
        btnGuardar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnImagen = new javax.swing.JButton();
        txtNickname = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtApellido = new javax.swing.JTextField();
        txtPass2 = new javax.swing.JPasswordField();
        txtPass1 = new javax.swing.JPasswordField();
        txtNombreImagen = new javax.swing.JTextField();
        panelImagen = new javax.swing.JPanel();
        lblEstado = new javax.swing.JLabel();
        cboEstado = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fondo.setBackground(new java.awt.Color(102, 102, 102));

        lblNombre.setFont(new java.awt.Font("Kristen ITC", 1, 18)); // NOI18N
        lblNombre.setForeground(new java.awt.Color(51, 255, 51));
        lblNombre.setText("Nombre");

        lblApellido.setFont(new java.awt.Font("Kristen ITC", 1, 18)); // NOI18N
        lblApellido.setForeground(new java.awt.Color(51, 255, 51));
        lblApellido.setText("Apellido");

        lblNickname.setFont(new java.awt.Font("Kristen ITC", 1, 18)); // NOI18N
        lblNickname.setForeground(new java.awt.Color(51, 255, 51));
        lblNickname.setText("Nickname");

        lblEmail.setFont(new java.awt.Font("Kristen ITC", 1, 18)); // NOI18N
        lblEmail.setForeground(new java.awt.Color(51, 255, 51));
        lblEmail.setText("Email");

        lblPass2.setFont(new java.awt.Font("Kristen ITC", 1, 18)); // NOI18N
        lblPass2.setForeground(new java.awt.Color(51, 255, 51));
        lblPass2.setText("Contraseña");

        lblPass1.setFont(new java.awt.Font("Kristen ITC", 1, 18)); // NOI18N
        lblPass1.setForeground(new java.awt.Color(51, 255, 51));
        lblPass1.setText("Contraseña");

        btnGuardar.setText("Guardar");
        btnGuardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnGuardarMouseClicked(evt);
            }
        });
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.setMaximumSize(new java.awt.Dimension(71, 23));
        btnCancelar.setMinimumSize(new java.awt.Dimension(71, 23));
        btnCancelar.setPreferredSize(new java.awt.Dimension(71, 23));
        btnCancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCancelarMouseClicked(evt);
            }
        });

        btnImagen.setText("Imagen");
        btnImagen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnImagenMouseClicked(evt);
            }
        });

        txtNickname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNicknameActionPerformed(evt);
            }
        });

        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });

        txtEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });

        txtApellido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtApellidoActionPerformed(evt);
            }
        });

        txtPass2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPass2ActionPerformed(evt);
            }
        });

        txtPass1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtPass1MouseClicked(evt);
            }
        });
        txtPass1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPass1ActionPerformed(evt);
            }
        });

        txtNombreImagen.setPreferredSize(new java.awt.Dimension(30, 20));

        javax.swing.GroupLayout panelImagenLayout = new javax.swing.GroupLayout(panelImagen);
        panelImagen.setLayout(panelImagenLayout);
        panelImagenLayout.setHorizontalGroup(
            panelImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );
        panelImagenLayout.setVerticalGroup(
            panelImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 150, Short.MAX_VALUE)
        );

        lblEstado.setFont(new java.awt.Font("Kristen ITC", 1, 18)); // NOI18N
        lblEstado.setText("Estado");

        cboEstado.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Activo", "Inactivo" }));

        javax.swing.GroupLayout fondoLayout = new javax.swing.GroupLayout(fondo);
        fondo.setLayout(fondoLayout);
        fondoLayout.setHorizontalGroup(
            fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fondoLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnImagen)
                    .addGroup(fondoLayout.createSequentialGroup()
                        .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNombre)
                            .addComponent(lblApellido))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(fondoLayout.createSequentialGroup()
                                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblNickname)
                                .addGap(18, 18, 18)
                                .addComponent(txtNickname, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE))
                            .addGroup(fondoLayout.createSequentialGroup()
                                .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lblEmail)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtEmail))))
                    .addComponent(txtNombreImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblPass1)
                    .addComponent(lblPass2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPass1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPass2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fondoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelImagen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        fondoLayout.setVerticalGroup(
            fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fondoLayout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNombre)
                    .addComponent(lblPass1)
                    .addComponent(lblNickname)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPass1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNickname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPass2)
                    .addComponent(txtPass2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblApellido)
                    .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEmail)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addComponent(btnImagen)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtNombreImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(fondoLayout.createSequentialGroup()
                        .addComponent(lblEstado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(fondoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(panelImagen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(fondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fondo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed
        
        this.getTxtApellido().requestFocus();
    }//GEN-LAST:event_txtNombreActionPerformed

    private void txtApellidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtApellidoActionPerformed
        
        this.getTxtNickname().requestFocus();
    }//GEN-LAST:event_txtApellidoActionPerformed

    private void txtNicknameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNicknameActionPerformed
        
        this.getTxtEmail().requestFocus();
    }//GEN-LAST:event_txtNicknameActionPerformed

    private void txtEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmailActionPerformed
        
        
        
        
        this.getTxtPass1().requestFocus();
    }//GEN-LAST:event_txtEmailActionPerformed

    private void txtPass1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPass1ActionPerformed
        
        
        
        this.getTxtPass2().requestFocus();
    }//GEN-LAST:event_txtPass1ActionPerformed

    private void txtPass2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPass2ActionPerformed
        
        this.getBtnImagen().requestFocus();
    }//GEN-LAST:event_txtPass2ActionPerformed

    private void btnImagenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnImagenMouseClicked
        
        if(origen.equalsIgnoreCase("Sala")){
            
            cambiarImagen = confirmarCambioImagen();
            
            if(cambiarImagen){
                
                JFileChooser selector = new JFileChooser();
                FileNameExtensionFilter filtroImagen= new FileNameExtensionFilter("JPG","jpg");
                selector.setFileFilter(filtroImagen);

                int opcion = selector.showOpenDialog(this);  //abre la ventana


                if(opcion==JFileChooser.APPROVE_OPTION){          //si hace click en el boton abrir de la ventana
                    try {
                        archivo=selector.getSelectedFile();
                        txtNombreImagen.setText(archivo.getName());
                        panelImagen.removeAll();
                        panelImagen.add(new Fondo(150,150,selector.getSelectedFile().toURL()));
                        this.repaint();
                    }catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
                
        
        }else{
            JFileChooser selector = new JFileChooser();
            FileNameExtensionFilter filtroImagen= new FileNameExtensionFilter("JPG","jpg");
            selector.setFileFilter(filtroImagen);

            int opcion = selector.showOpenDialog(this);  //abre la ventana


            if(opcion==JFileChooser.APPROVE_OPTION){          //si hace click en el boton abrir de la ventana
                try {
                    archivo=selector.getSelectedFile();
                    txtNombreImagen.setText(archivo.getName());
                    panelImagen.removeAll();
                    panelImagen.add(new Fondo(150,150,selector.getSelectedFile().toURL()));
                    this.repaint();
                }catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        
        
        
        
        
    }//GEN-LAST:event_btnImagenMouseClicked

    private void btnCancelarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCancelarMouseClicked
        
        musicaFondo.Stop();
        String[] args=null;
        if(origen.equalsIgnoreCase("Login")){
        Login.main(args);
        this.dispose();
        }else{
            musicaFondo.Stop();
            Sala.hostname = this.hostname;
            Sala.usuarioActual = this.usuarioActual;
            Sala.main(args);
            this.dispose();
        }
        
    }//GEN-LAST:event_btnCancelarMouseClicked

    private void btnGuardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGuardarMouseClicked
        if(origen .equalsIgnoreCase("Login")){
            if(verificarCampos()){
                if(guardarUsuario()){
                    musicaFondo.Stop();
                    String[] args = null;
                    Sala.hostname = this.hostname;
                    Sala.usuarioActual = this.usuarioActual;
                    Sala.main(args);
                    this.dispose();
                }
            }
        }else{
            if(verificarCampos()){
                if(confirmarUsuario())        
                    if(actualizarUsuario()){
                        musicaFondo.Stop();
                        String[] args = null;
                        Sala.hostname = this.hostname;
                        Sala.usuarioActual = this.usuarioActual;
                        Sala.main(args);
                        this.dispose();
                    }
            }
            
            
        }
    }//GEN-LAST:event_btnGuardarMouseClicked

    private void txtPass1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtPass1MouseClicked
    
        if(origen.equalsIgnoreCase("Sala")){
            
            cambiarClave = confirmarCambioClave();
            
            if(cambiarClave){
                txtPass1.setEditable(true);
                txtPass2.setEditable(true);
                txtPass1.setText("");
                txtPass2.setText("");
            }
        }
        
        
        
    }//GEN-LAST:event_txtPass1MouseClicked

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnGuardarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]){
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Registro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Registro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Registro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Registro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Registro().setVisible(true);
            }
        });
    }
    
    public boolean verificarCampos(){
        if(!verificarNombre(txtNombre.getText()))
            return false;
        
        if(!verificarApellido(txtApellido.getText()))
            return false;
        
        if(!verificarNickname(txtNickname.getText()))
            return false;
        
        if(!verificarEmail(txtEmail.getText()))
            return false;
        
        if(!verificarPass(txtPass1.getText(),txtPass2.getText()))
            return false;
        
        if(!verificarImagen(archivo,origen))
            return false;
        
        return true;
    }
    
    public boolean verificarNombre(String nombre){ 
        
        if(nombre.length()<2 || nombre.length()>20) {
            JOptionPane.showMessageDialog(this, "El Nombre debe tener de 2 a 20 caracteres");
            return false;
        }
        
        for(int i = 0; i < nombre.length(); ++i){
            
            char caracter = nombre.charAt(i);
            
            if(!Character.isLetter(caracter)){
                JOptionPane.showMessageDialog(this, "Nombre inválido");
                return false;
            }
        }
        return true;  
    }
    
    public boolean verificarApellido(String apellido){ 
        
        if(apellido.length()<2 || apellido.length()>20){
            JOptionPane.showMessageDialog(this, "El Apellido debe tener de 2 a 20 caracteres");
            return false;
        }
        
        for(int i = 0; i < apellido.length(); ++i){
            
            char caracter = apellido.charAt(i);
            
            if(!Character.isLetter(caracter)){
                JOptionPane.showMessageDialog(this, "Apellido inválido");
                return false;
            }
        }
        return true;  
    }
    
    
    
    public boolean verificarNickname(String nickname){
        
        if(origen.equalsIgnoreCase("Sala"))
            return true;
        
        ConexionMYSQL mysql = new ConexionMYSQL(hostname,"bduno","UsuarioUNO");
        Connection conexion = mysql.conectar();
        String sentenciaSQL = "";
        
        if(nickname.length()<2 || nickname.length()>15){
            JOptionPane.showMessageDialog(this, "El nickname debe tener de 2 a 12 caracteres");
            return false;
        }
        
        for(int i = 0; i < nickname.length(); ++i){
            
            char caracter = nickname.charAt(i);
            
            if(!Character.isLetterOrDigit(caracter)){
                JOptionPane.showMessageDialog(this, "Nickname inválido");
                return false;
            }
        }
        
        
        
        try {
            sentenciaSQL = "SELECT nickname FROM usuarios WHERE nickname='"+nickname+"'";
            Statement ST = conexion.createStatement();
            ResultSet RS = ST.executeQuery(sentenciaSQL);
            
            if(RS.next()){
                JOptionPane.showMessageDialog(this, "El Nickname que elegiste no está disponible,\npor favor elige otro");
                return false;
            }else{
                return true;
            } 
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            return false;
        }
        
        
    }
    
    public boolean verificarEmail(String email){
        
        ConexionMYSQL mysql = new ConexionMYSQL(hostname,"bduno","UsuarioUNO");
        Connection conexion = mysql.conectar();
        String sentenciaSQL = "";
        
        String PATTERN_EMAIL = "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"+ "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";
   
        Pattern pattern = Pattern.compile(PATTERN_EMAIL);
      
        Matcher matcher = pattern.matcher(email);
        
        if(!matcher.matches()){
            JOptionPane.showMessageDialog(this, "Email inválido");
            return false;
        }
        
        try {
            sentenciaSQL = "SELECT email FROM usuarios WHERE email='"+email+"'";
            Statement ST = conexion.createStatement();
            ResultSet RS = ST.executeQuery(sentenciaSQL);
            
            if(RS.next()){
                if(origen.equalsIgnoreCase("Sala"))
                    if(this.usuarioActual.getEmail().equalsIgnoreCase(email))
                        return true;
                
                JOptionPane.showMessageDialog(this, "El Email que ingresaste ya esta en uso,\npor favor verifica tu email."
                                                  + "\n\nSi el problema persiste contacta\nal administrador.");
                return false;
            }else{
                return true;
            } 
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            return false;
        }
        
        
        
    
    }
    
    public boolean verificarPass(String pass1, String pass2){
        
        if(origen.equalsIgnoreCase("Sala"))
            if(!cambiarClave)
                return true;
        
        if(!pass1.equals(pass2)){
            JOptionPane.showMessageDialog(this, "Las contraseñas no coinciden");
            return false;
        }
        
        if(pass1.length()<6 || pass1.length()>15){
            JOptionPane.showMessageDialog(this, "La Contraseña debe tener de 6 a 15 caracteres");
            return false;
        }
        
        for(int i = 0; i < pass1.length(); ++i){
            
            char caracter = pass1.charAt(i);
            
            if(!Character.isLetterOrDigit(caracter)){
                JOptionPane.showMessageDialog(this, "La Contraseña sólo debe contener letras y/o números");
                return false;
            }
        }
        return true;
    }
    
    public boolean verificarImagen(File archivo, String origen){
        
        if(origen.equalsIgnoreCase("Sala"))
            if(!cambiarImagen)
                return true;
        
        //peso max 85kb probado
        //peso max 65kb teoria
        ImageIcon imagenTemporal = null;
        
        if(archivo!=null && txtNombreImagen.getText().length()>4){ 
            if(archivo.length()>=65000){
            
                return ofrecerImagen();
           
            }else{

            int i = archivo.getPath().lastIndexOf('.');
            tipoDeImagen = archivo.getPath().substring(i+1);
            if(tipoDeImagen.equalsIgnoreCase("jpg")){
                imagenTemporal = new ImageIcon(archivo.getPath());
                
            }
                
            if(imagenTemporal!=null)
                return true;
           }
        }else{
            JOptionPane.showMessageDialog(this, "Imagen inválida");
        
            return ofrecerImagen();
        }
         
        return ofrecerImagen();
    }
    
    public boolean ofrecerImagen(){
        
        ImageIcon imagenTemporal = null;
    
        String opciones[] = new String[] {"Buscar Otra Imagen","Usar Imagen Predeterminada"};
                int intOpcion = JOptionPane.showOptionDialog(null, "La Imagen que has seleccionado\nexcede el límite de peso(65kb)\n"
                                                                  + "soportado para poder enviarla\ntus oponentes ó presenta\n"
                                                                  + "otro tipo de inconveniente, por favor\n"
                                                                  + "selecciona otra imagen o usa\nesta imagen predeterminada\n"
                                                                  + "hasta que tengas una imagen\ncon el peso apropiado"
                                                                  , "Problema con imagen seleccionada"
                                                                  , JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE
                                                                  , new ImageIcon(getClass().getResource("/Imagenes/imagenAuxiliar.jpg")), opciones, opciones[0]);

                switch(intOpcion){

                    case 0:{
                        return false;
                    }
                        
                    case 1:{
                        
                        
                        
                        archivo = new File("src/Imagenes/imagenAuxiliar.jpg");
                        
                        if(archivo!=null){
                            JOptionPane.showMessageDialog(null, "Cargando Imagen Predeterminada...");
                            imagenTemporal = new ImageIcon(getClass().getResource("/Imagenes/imagenAuxiliar.jpg"));
                            txtNombreImagen.setText("imagenAuxiliar.jpg");
                            panelImagen.removeAll();
                            panelImagen.add(new Fondo(150,150,"/Imagenes/imagenAuxiliar.jpg"));
                            this.repaint();
                            return true;
                        }
                        else
                            return false;
                    }
 
                    default:{
                        return verificarImagen(archivo,origen);
                    }
                }
        
    }
    
    
    public boolean guardarUsuario(){
        
        String nombre,apellido,nickname,clave,imagen,email,estado;
        
        ConexionMYSQL mysql = new ConexionMYSQL(hostname,"bduno","UsuarioUNO");
        Connection conexion = mysql.conectar();
        String sentenciaSQL = "";
        
        nombre = txtNombre.getText();
        apellido = txtApellido.getText();
        nickname = txtNickname.getText();
        clave = txtPass1.getText();
        email = txtEmail.getText();
        estado = (String) cboEstado.getSelectedItem();
        imagen="";
        
        
        
        try {
            BufferedImage img = ImageIO.read(archivo);
            imagen = Imagen.encodeToString(img, "jpg");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
        
        
        
        //new usuario(nombre,apellido)
        
        if(origen.equalsIgnoreCase("Login")){
            sentenciaSQL = "INSERT INTO usuarios(nombre,apellido,nickname,clave,email,imagen,estado,partidasJugadas,partidasGanadas,"
                         + "partidasPerdidas,partidasAbandonadas) VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
    
        }else{
            sentenciaSQL = "INSERT INTO usuarios(nombre,apellido,nickname,clave,email,imagen,estado) VALUES(?, ?, ?, ?, ?, ?, ?)";
        
            
            
            
            
        }
        
        try {
            PreparedStatement PST = conexion.prepareStatement(sentenciaSQL);
            PST.setString(1, nombre);
            PST.setString(2, apellido);
            PST.setString(3, nickname);
            PST.setString(4, DigestUtils.md5Hex(clave));
            PST.setString(5, email);
            PST.setString(6, imagen);
            PST.setString(7, estado);
            
            if(origen.equalsIgnoreCase("Login")){
                PST.setString(8, "0");
                PST.setString(9, "0");
                PST.setString(10, "0");
                PST.setString(11, "0");
            }
            
            
            
            
            
            if(PST.executeUpdate()>0){
                this.usuarioActual = new Usuario(nombre, apellido, nickname, DigestUtils.md5Hex(clave), imagen, email, estado, null);
                JOptionPane.showMessageDialog(this, "Los datos han sido guardados satisfactoriamente");
                return true;
            }
            else{
                JOptionPane.showMessageDialog(this, "Ha ocurrido un ERROR a la hora de guardar los datos");
                return false;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            return false;
        }
    }
    
    public boolean actualizarUsuario(){
        
        
        String nombre,apellido,nickname,clave,imagen,email,estado;
        
        ConexionMYSQL mysql = new ConexionMYSQL(hostname,"bduno","UsuarioUNO");
        Connection conexion = mysql.conectar();
        String sentenciaSQL = "";
        
        nombre = txtNombre.getText();
        apellido = txtApellido.getText();
        nickname = txtNickname.getText();
        clave = txtPass1.getText();
        email = txtEmail.getText();
        estado = (String) cboEstado.getSelectedItem();
        imagen="";
        
        
        if(cambiarClave){
            clave = DigestUtils.md5Hex(clave);
        }
        
        if(cambiarImagen){
        
            try {
                BufferedImage img = ImageIO.read(archivo);
                imagen = Imagen.encodeToString(img, "jpg");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }

        }
        else
            imagen = this.usuarioActual.getImagen();
        
        
     
        sentenciaSQL = " UPDATE usuarios SET nombre = '"+nombre+"', apellido = '"+apellido+"',"
                     + " email = '"+email+"', clave = '"+clave+"',"+" estado = '"+estado+"',"
                     + " imagen = '"+imagen+"' "
                     + " WHERE nickname = '"+nickname+"'";
        
        
        try {
            PreparedStatement PST = conexion.prepareStatement(sentenciaSQL);
            
            if(PST.executeUpdate()>0){
                this.usuarioActual = new Usuario(nombre, apellido, nickname, clave, imagen, email, estado, null);
                JOptionPane.showMessageDialog(this, "Los datos han sido modificados satisfactoriamente");
                return true;
            }
            else{
                JOptionPane.showMessageDialog(this, "Ha ocurrido un ERROR a la hora de guardar los datos");
                return false;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            return false;
        }
    }
    
    
    public void cargarUsuario(){
        
        ImageIcon imagenTemporal = null;
        
        
        txtNombre.setText(this.usuarioActual.getNombre());
        txtApellido.setText(this.usuarioActual.getApellido());
        txtNickname.setText(this.usuarioActual.getNickname());
        txtEmail.setText(this.usuarioActual.getEimail());
        txtPass1.setText(this.usuarioActual.getClave());
        txtPass2.setText(this.usuarioActual.getClave());
        cboEstado.setSelectedItem(this.usuarioActual.getEstado());
        
        txtNombreImagen.setText("");
        panelImagen.removeAll();
        
        imagenTemporal = new ImageIcon(Imagen.decodeToImage(usuarioActual.getImagen()));
        
        
        panelImagen.add(new Fondo(150,150, imagenTemporal));
        
        
        
    }
    
    public boolean confirmarCambioClave(){
        
        if(cambiarClave == true)
            return true;
    
        String opciones[] = new String[] {"Sí","No"};
        int opcion = JOptionPane.showOptionDialog(null, "¿Desea cambiar su contraseña?\n"
                                                        + "Si dice que sí no se podrá arrepentir y\n"
                                                        + "deberá ejecutar el cambio de clave."
                                                        , "Confirmacion de cambio clave",
                                                        JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE,
                                                        new ImageIcon(getClass().getResource("/Imagenes/piensa.gif")), opciones, opciones[0]);
        
        switch(opcion){
            
            case 0:{
                return true;
            }
            
            case 1:{
                return false;   
            }
            
            default:{
                return confirmarCambioClave();
            }
        }
    }
    
    public boolean confirmarCambioImagen(){
        
        if(cambiarImagen == true)
            return true;
    
        String opciones[] = new String[] {"Sí","No"};
        int opcion = JOptionPane.showOptionDialog(null, "¿Desea cambiar su Imagen?\n"
                                                        + "Si dice que sí no se podrá arrepentir y\n"
                                                        + "deberá ejecutar el cambio de imagen."
                                                        , "Confirmacion de cambio imagen",
                                                        JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE,
                                                        new ImageIcon(getClass().getResource("/Imagenes/piensa.gif")), opciones, opciones[0]);
        
        switch(opcion){
            
            case 0:{
                return true;
            }
            
            case 1:{
                return false;   
            }
            
            default:{
                return confirmarCambioClave();
            }
        }
    }
    
    public boolean confirmarUsuario(){
        
        JPasswordField txtPass = new JPasswordField();
        int opcion = JOptionPane.showConfirmDialog(null, txtPass, "Ingresa tu contraseña", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (opcion == JOptionPane.OK_OPTION) {
            String clave = new String(txtPass.getPassword());
            
            if(Login.verificarUsuario(this.hostname, this.usuarioActual.getNickname(), DigestUtils.md5Hex(clave)))
                return true;
            else
                JOptionPane.showMessageDialog(this, "La contraseña introducida es incorrecta");
        }
        return false;
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnImagen;
    private javax.swing.JComboBox cboEstado;
    private javax.swing.JPanel fondo;
    private javax.swing.JLabel lblApellido;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblEstado;
    private javax.swing.JLabel lblNickname;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblPass1;
    private javax.swing.JLabel lblPass2;
    private javax.swing.JPanel panelImagen;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtNickname;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtNombreImagen;
    private javax.swing.JPasswordField txtPass1;
    private javax.swing.JPasswordField txtPass2;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the imagenFondo
     */
    public Fondo getImagenFondo() {
        return imagenFondo;
    }

    /**
     * @param imagenFondo the imagenFondo to set
     */
    public void setImagenFondo(Fondo imagenFondo) {
        this.imagenFondo = imagenFondo;
    }

    /**
     * @return the origen
     */
    public String getOrigen() {
        return origen;
    }

    

    /**
     * @return the btnCancelar
     */
    public javax.swing.JButton getBtnCancelar() {
        return btnCancelar;
    }

    /**
     * @param btnCancelar the btnCancelar to set
     */
    public void setBtnCancelar(javax.swing.JButton btnCancelar) {
        this.btnCancelar = btnCancelar;
    }

    /**
     * @return the btnGuardar
     */
    public javax.swing.JButton getBtnGuardar() {
        return btnGuardar;
    }

    /**
     * @param btnGuardar the btnGuardar to set
     */
    public void setBtnGuardar(javax.swing.JButton btnGuardar) {
        this.btnGuardar = btnGuardar;
    }

    /**
     * @return the btnImagen
     */
    public javax.swing.JButton getBtnImagen() {
        return btnImagen;
    }

    /**
     * @param btnImagen the btnImagen to set
     */
    public void setBtnImagen(javax.swing.JButton btnImagen) {
        this.btnImagen = btnImagen;
    }

    /**
     * @return the cboEstado
     */
    public javax.swing.JComboBox getCboEstado() {
        return cboEstado;
    }

    /**
     * @param cboEstado the cboEstado to set
     */
    public void setCboEstado(javax.swing.JComboBox cboEstado) {
        this.cboEstado = cboEstado;
    }

    /**
     * @return the fondo
     */
    public javax.swing.JPanel getFondo() {
        return fondo;
    }

    /**
     * @param fondo the fondo to set
     */
    public void setFondo(javax.swing.JPanel fondo) {
        this.fondo = fondo;
    }

    /**
     * @return the lblApellido
     */
    public javax.swing.JLabel getLblApellido() {
        return lblApellido;
    }

    /**
     * @param lblApellido the lblApellido to set
     */
    public void setLblApellido(javax.swing.JLabel lblApellido) {
        this.lblApellido = lblApellido;
    }

    /**
     * @return the lblEmail
     */
    public javax.swing.JLabel getLblEmail() {
        return lblEmail;
    }

    /**
     * @param lblEmail the lblEmail to set
     */
    public void setLblEmail(javax.swing.JLabel lblEmail) {
        this.lblEmail = lblEmail;
    }

    /**
     * @return the lblEstado
     */
    public javax.swing.JLabel getLblEstado() {
        return lblEstado;
    }

    /**
     * @param lblEstado the lblEstado to set
     */
    public void setLblEstado(javax.swing.JLabel lblEstado) {
        this.lblEstado = lblEstado;
    }

    /**
     * @return the lblNickname
     */
    public javax.swing.JLabel getLblNickname() {
        return lblNickname;
    }

    /**
     * @param lblNickname the lblNickname to set
     */
    public void setLblNickname(javax.swing.JLabel lblNickname) {
        this.lblNickname = lblNickname;
    }

    /**
     * @return the lblNombre
     */
    public javax.swing.JLabel getLblNombre() {
        return lblNombre;
    }

    /**
     * @param lblNombre the lblNombre to set
     */
    public void setLblNombre(javax.swing.JLabel lblNombre) {
        this.lblNombre = lblNombre;
    }

    /**
     * @return the lblPass1
     */
    public javax.swing.JLabel getLblPass1() {
        return lblPass1;
    }

    /**
     * @param lblPass1 the lblPass1 to set
     */
    public void setLblPass1(javax.swing.JLabel lblPass1) {
        this.lblPass1 = lblPass1;
    }

    /**
     * @return the lblPass2
     */
    public javax.swing.JLabel getLblPass2() {
        return lblPass2;
    }

    /**
     * @param lblPass2 the lblPass2 to set
     */
    public void setLblPass2(javax.swing.JLabel lblPass2) {
        this.lblPass2 = lblPass2;
    }

    /**
     * @return the panelImagen
     */
    public javax.swing.JPanel getPanelImagen() {
        return panelImagen;
    }

    /**
     * @param panelImagen the panelImagen to set
     */
    public void setPanelImagen(javax.swing.JPanel panelImagen) {
        this.panelImagen = panelImagen;
    }

    /**
     * @return the txtApellido
     */
    public javax.swing.JTextField getTxtApellido() {
        return txtApellido;
    }

    /**
     * @param txtApellido the txtApellido to set
     */
    public void setTxtApellido(javax.swing.JTextField txtApellido) {
        this.txtApellido = txtApellido;
    }

    /**
     * @return the txtEmail
     */
    public javax.swing.JTextField getTxtEmail() {
        return txtEmail;
    }

    /**
     * @param txtEmail the txtEmail to set
     */
    public void setTxtEmail(javax.swing.JTextField txtEmail) {
        this.txtEmail = txtEmail;
    }

    /**
     * @return the txtNickname
     */
    public javax.swing.JTextField getTxtNickname() {
        return txtNickname;
    }

    /**
     * @param txtNickname the txtNickname to set
     */
    public void setTxtNickname(javax.swing.JTextField txtNickname) {
        this.txtNickname = txtNickname;
    }

    /**
     * @return the txtNombre
     */
    public javax.swing.JTextField getTxtNombre() {
        return txtNombre;
    }

    /**
     * @param txtNombre the txtNombre to set
     */
    public void setTxtNombre(javax.swing.JTextField txtNombre) {
        this.txtNombre = txtNombre;
    }

    /**
     * @return the txtNombreImagen
     */
    public javax.swing.JTextField getTxtNombreImagen() {
        return txtNombreImagen;
    }

    /**
     * @param txtNombreImagen the txtNombreImagen to set
     */
    public void setTxtNombreImagen(javax.swing.JTextField txtNombreImagen) {
        this.txtNombreImagen = txtNombreImagen;
    }

    /**
     * @return the txtPass1
     */
    public javax.swing.JPasswordField getTxtPass1() {
        return txtPass1;
    }

    /**
     * @param txtPass1 the txtPass1 to set
     */
    public void setTxtPass1(javax.swing.JPasswordField txtPass1) {
        this.txtPass1 = txtPass1;
    }

    /**
     * @return the txtPass2
     */
    public javax.swing.JPasswordField getTxtPass2() {
        return txtPass2;
    }

    /**
     * @param txtPass2 the txtPass2 to set
     */
    public void setTxtPass2(javax.swing.JPasswordField txtPass2) {
        this.txtPass2 = txtPass2;
    }
}
