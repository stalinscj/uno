/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Formularios;

import Esencial.ListaCartas;
import javax.swing.JOptionPane;

/**
 * Clase que representa la pila de descarte, es decir, en esta pila los jugadores colocar√°n las cartas que descarten de su mano.
 * @author Stalin
 */
public class PilaDescarte extends javax.swing.JPanel {
    
    private ListaCartas listaCartas;
    private CartaNormal cartaNormal;
    private CartaEspecial cartaEspecial;
    //private Carta CartaActual;
    //private Carta CartaAnterior;

    /**
     * Creates new form PilaDescarte
     */
    public PilaDescarte() {
        listaCartas = new ListaCartas();
        cartaNormal = new CartaNormal(-1,"");
        cartaEspecial = new CartaEspecial("","",-1);
        //CartaActual = null;
        //CartaAnterior = null;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    /**
     * @return the listaCartas
     */
    public ListaCartas getListaCartas() {
        return listaCartas;
    }

    /**
     * @param listaCartas the listaCartas to set
     */
    public void setListaCartas(ListaCartas listaCartas) {
        this.listaCartas = listaCartas;
    }

    /**
     * @return the cartaNormal
     */
    public CartaNormal getCartaNormal() {
        return cartaNormal;
    }

    /**
     * @param cartaNormal the cartaNormal to set
     */
    public void setCartaNormal(CartaNormal cartaNormal) {
        this.cartaNormal = cartaNormal;
    }

    /**
     * @return the cartaEspecial
     */
    public CartaEspecial getCartaEspecial() {
        return cartaEspecial;
    }

    /**
     * @param cartaEspecial the cartaEspecial to set
     */
    public void setCartaEspecial(CartaEspecial cartaEspecial) {
        this.cartaEspecial = cartaEspecial;
    }
    
    public String getColorCartaActual(){
        
        if(listaCartas.get(listaCartas.size()-1) instanceof CartaNormal){
            cartaNormal = (CartaNormal) listaCartas.get(listaCartas.size()-1);
            return cartaNormal.getColor();
        }
        else{
            cartaEspecial = (CartaEspecial) listaCartas.get(listaCartas.size()-1);
            return cartaEspecial.getColor();
        }
        
        
    }
    
    public String getColorCartaAnterior(){
        
        if(listaCartas.get(listaCartas.size()-2) instanceof CartaNormal){
            cartaNormal = (CartaNormal) listaCartas.get(listaCartas.size()-2);
            return cartaNormal.getColor();
        }
        else{
            cartaEspecial = (CartaEspecial) listaCartas.get(listaCartas.size()-2);
            return cartaEspecial.getColor();
        }
        
        
    }
    
    public String getNumeroONombreCartaActual(){
        
        if(listaCartas.get(listaCartas.size()-1) instanceof CartaNormal){
            cartaNormal = (CartaNormal) listaCartas.get(listaCartas.size()-1);
            return Integer.toString(cartaNormal.getNumero());
        }
        else{
            
            cartaEspecial = (CartaEspecial) listaCartas.get(listaCartas.size()-1);
            return cartaEspecial.getNombre();
        }
        
        
    }
    
    public String getNumeroONombreCartaAnterior(){
        
        if(listaCartas.get(listaCartas.size()-2) instanceof CartaNormal){
            cartaNormal = (CartaNormal) listaCartas.get(listaCartas.size()-2);
            return Integer.toString(cartaNormal.getNumero());
        }
        else{
            cartaEspecial = (CartaEspecial) listaCartas.get(listaCartas.size()-2);
            return cartaEspecial.getNombre();
        }
        
    }
    
    public void add(String tipoCarta, String numeroONombre, String color,int valor){
        if(tipoCarta.equalsIgnoreCase("CartaNormal")){
            listaCartas.add(new CartaNormal(valor, color));
        }
        else{
            listaCartas.add(new CartaEspecial(numeroONombre, color, valor));
        }
    }
    
    public String getCartaActual(){
        
        if(listaCartas.get(listaCartas.size()-1) instanceof CartaNormal){
            cartaNormal = (CartaNormal) listaCartas.get(listaCartas.size()-1);
            return cartaNormal.getNumero()+cartaNormal.getColor();
        }
        else{
            cartaEspecial = (CartaEspecial) listaCartas.get(listaCartas.size()-1);
            return cartaEspecial.getNombre()+cartaEspecial.getColor();
        }
    }
    
    public String getCartaAnterior(){
        
        if(listaCartas.get(listaCartas.size()-2) instanceof CartaNormal){
            cartaNormal = (CartaNormal) listaCartas.get(listaCartas.size()-2);
            return cartaNormal.getNumero()+cartaNormal.getColor();
        }
        else{
            cartaEspecial = (CartaEspecial) listaCartas.get(listaCartas.size()-2);
            return cartaEspecial.getNombre()+cartaEspecial.getColor();
        }
    }
    
    public void removeCartaActual(){
        listaCartas.remove(listaCartas.size()-1);
    }
    
    public String getTipoCartaActual(){
        
        if(listaCartas.get(listaCartas.size()-1) instanceof CartaNormal){
            return "CartaNormal";
        }
        else{
            
            return "CartaEspecial";
        }
    }
    
    public String getTipoCartaAnterior(){
        
        if(listaCartas.get(listaCartas.size()-2) instanceof CartaNormal){
            return "CartaNormal";
        }
        else{
            
            return "CartaEspecial";
        }
    }
    
    /*
    public void imprimircartas(){
        for(int i=0;i<listaCartas.size();i++){
            if(listaCartas.get(i) instanceof CartaNormal){
            cartaNormal = (CartaNormal) listaCartas.get(i);
            JOptionPane.showMessageDialog(cartaNormal, i+"Carta: "+cartaNormal.getNumero()+cartaNormal.getColor());
            
        }
        else{
            cartaEspecial = (CartaEspecial) listaCartas.get(i);
            JOptionPane.showMessageDialog(cartaNormal, i+"Carta: "+cartaEspecial.getNombre()+cartaEspecial.getColor());
            
        }
        }
    }
    */
}
